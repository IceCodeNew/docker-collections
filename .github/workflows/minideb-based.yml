name: minideb-based images

on:
  push:
    branches:
    - 'master'
    paths:
    - '.github/workflows/minideb-based.yml'
    - 'minideb-based/*.Dockerfile'
  schedule:
  - cron: "0 0 * * *"
  workflow_dispatch:

jobs:
  debian:
    runs-on: ${{ matrix.platform == 'linux/arm64' && 'ubuntu-24.04-arm' || 'ubuntu-24.04' }}
    strategy:
      fail-fast: false
      matrix:
        platform:
          - linux/amd64
          - linux/arm64
    steps:
      -
        name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      -
        name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      -
        name: Build and push by digest
        id: build
        uses: docker/build-push-action@v6
        with:
          context: "{{defaultContext}}:minideb-based"
          file: "./debian.Dockerfile"
          push: true
          platforms: ${{ matrix.platform }}
          cache-from: type=gha,scope=${{ matrix.platform }}
          cache-to: type=gha,mode=max,scope=${{ matrix.platform }}
          outputs: type=image,compression=estargz,force-compression=true,oci-mediatypes=true,name=${{ secrets.DOCKERHUB_USERNAME }}/image-builder,push-by-digest=true,name-canonical=true,push=true
      -
        name: Export digest
        run: |
          mkdir -p /tmp/debian-digests/
          digest="${{ steps.build.outputs.digest }}"
          touch "/tmp/debian-digests/${digest#sha256:}"          

          platform=${{ matrix.platform }}
          echo "PLATFORM_PAIR=${platform//\//-}" >> $GITHUB_ENV
      -
        name: Upload digest
        uses: actions/upload-artifact@v4
        with:
          name: debian-digests-${{ env.PLATFORM_PAIR }}
          path: /tmp/debian-digests/*
          if-no-files-found: error
          retention-days: 1

  debian-multiarch:
    runs-on: ubuntu-24.04
    needs:
      - debian
    steps:
      -
        name: Download digests
        uses: actions/download-artifact@v4
        with:
          path: /tmp/debian-digests/
          pattern: debian-digests-*
          merge-multiple: true
      -
        name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      -
        name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      -
        name: Create manifest list and push
        working-directory: /tmp/debian-digests/
        run: |
          docker buildx imagetools create --tag ${{ secrets.DOCKERHUB_USERNAME }}/image-builder:debian \
              $(printf '${{ secrets.DOCKERHUB_USERNAME }}/image-builder@sha256:%s ' *)          
      -
        name: Inspect image
        run: |
          docker buildx imagetools inspect ${{ secrets.DOCKERHUB_USERNAME }}/image-builder:debian \
              | grep -Po '[^ \r\n\t\v]+@sha256:[a-z0-9]+' | xargs -r -t -n 1 docker buildx imagetools inspect --raw
      -
        name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@0.31.0
        with:
          image-ref: "${{ secrets.DOCKERHUB_USERNAME }}/image-builder:debian"
          format: 'table'

  graftcp:
    runs-on: ${{ matrix.platform == 'linux/arm64' && 'ubuntu-24.04-arm' || 'ubuntu-24.04' }}
    strategy:
      fail-fast: false
      matrix:
        platform:
          - linux/amd64
          - linux/arm64
    steps:
      -
        name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      -
        name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Fetch latest tag of Golang
        shell: bash
        run: |
          golang_latest_tag_name=$(
              docker run --rm golang:alpine go version \
                  | grep -Po '(?<=go version go)[0-9]+\.[0-9]+\.[0-9]+'
          )
          echo "golang_latest_tag_name=${golang_latest_tag_name}" >> "$GITHUB_ENV"
      -
        name: Build and push by digest
        id: build
        uses: docker/build-push-action@v6
        with:
          build-args: GOLANG_VERSION=${{ env.golang_latest_tag_name }}
          context: "{{defaultContext}}:minideb-based"
          file: "./graftcp.Dockerfile"
          push: true
          platforms: ${{ matrix.platform }}
          cache-from: type=gha,scope=${{ matrix.platform }}
          cache-to: type=gha,mode=max,scope=${{ matrix.platform }}
          outputs: type=image,compression=estargz,force-compression=true,oci-mediatypes=true,name=${{ secrets.DOCKERHUB_USERNAME }}/graftcp,push-by-digest=true,name-canonical=true,push=true
      -
        name: Export digest
        run: |
          mkdir -p /tmp/graftcp-digests/
          digest="${{ steps.build.outputs.digest }}"
          touch "/tmp/graftcp-digests/${digest#sha256:}"          

          platform=${{ matrix.platform }}
          echo "PLATFORM_PAIR=${platform//\//-}" >> $GITHUB_ENV
      -
        name: Upload digest
        uses: actions/upload-artifact@v4
        with:
          name: graftcp-digests-${{ env.PLATFORM_PAIR }}
          path: /tmp/graftcp-digests/*
          if-no-files-found: error
          retention-days: 1

  graftcp-multiarch:
    runs-on: ubuntu-24.04
    needs:
      - graftcp
    steps:
      -
        name: Download digests
        uses: actions/download-artifact@v4
        with:
          path: /tmp/graftcp-digests/
          pattern: graftcp-digests-*
          merge-multiple: true
      -
        name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      -
        name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      -
        name: Create manifest list and push
        working-directory: /tmp/graftcp-digests/
        run: |
          docker buildx imagetools create --tag ${{ secrets.DOCKERHUB_USERNAME }}/graftcp:latest \
              $(printf '${{ secrets.DOCKERHUB_USERNAME }}/graftcp@sha256:%s ' *)          
      -
        name: Inspect image
        run: |
          docker buildx imagetools inspect ${{ secrets.DOCKERHUB_USERNAME }}/graftcp:latest \
              | grep -Po '[^ \r\n\t\v]+@sha256:[a-z0-9]+' | xargs -r -t -n 1 docker buildx imagetools inspect --raw

  python-nonroot:
    runs-on: ${{ matrix.platform == 'linux/arm64' && 'ubuntu-24.04-arm' || 'ubuntu-24.04' }}
    strategy:
      fail-fast: false
      matrix:
        platform:
          - linux/amd64
          - linux/arm64
    steps:
      -
        name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      -
        name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      -
        name: Build and push by digest
        id: build
        uses: docker/build-push-action@v6
        with:
          context: "{{defaultContext}}:minideb-based"
          file: "./python:debian-nonroot.Dockerfile"
          push: true
          platforms: ${{ matrix.platform }}
          cache-from: type=gha,scope=${{ matrix.platform }}
          cache-to: type=gha,mode=max,scope=${{ matrix.platform }}
          outputs: type=image,compression=estargz,force-compression=true,oci-mediatypes=true,name=${{ secrets.DOCKERHUB_USERNAME }}/python,push-by-digest=true,name-canonical=true,push=true
      -
        name: Export digest
        run: |
          mkdir -p /tmp/python-nonroot-digests/
          digest="${{ steps.build.outputs.digest }}"
          touch "/tmp/python-nonroot-digests/${digest#sha256:}"          

          platform=${{ matrix.platform }}
          echo "PLATFORM_PAIR=${platform//\//-}" >> $GITHUB_ENV
      -
        name: Upload digest
        uses: actions/upload-artifact@v4
        with:
          name: python-nonroot-digests-${{ env.PLATFORM_PAIR }}
          path: /tmp/python-nonroot-digests/*
          if-no-files-found: error
          retention-days: 1

  python-nonroot-multiarch:
    runs-on: ubuntu-24.04
    needs:
      - python-nonroot
    steps:
      -
        name: Download digests
        uses: actions/download-artifact@v4
        with:
          path: /tmp/python-nonroot-digests/
          pattern: python-nonroot-digests-*
          merge-multiple: true
      -
        name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      -
        name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      -
        name: Create manifest list and push
        working-directory: /tmp/python-nonroot-digests/
        run: |
          docker buildx imagetools create --tag ${{ secrets.DOCKERHUB_USERNAME }}/python:debian-nonroot \
              $(printf '${{ secrets.DOCKERHUB_USERNAME }}/python@sha256:%s ' *)          
      -
        name: Inspect image
        run: |
          docker buildx imagetools inspect ${{ secrets.DOCKERHUB_USERNAME }}/python:debian-nonroot \
              | grep -Po '[^ \r\n\t\v]+@sha256:[a-z0-9]+' | xargs -r -t -n 1 docker buildx imagetools inspect --raw
      -
        name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@0.31.0
        with:
          image-ref: "${{ secrets.DOCKERHUB_USERNAME }}/python:debian-nonroot"
          format: 'table'
